// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChannelInitParameters struct {

	// ID of the application this channel belongs to.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Arch. Cannot be changed once created.
	Arch *string `json:"arch,omitempty" tf:"arch,omitempty"`

	// Hex color code that informs the color of the channel in the UI.
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// Name of the channel. Can be an existing one as long as the arch is different.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the package this channel provides.
	PackageID *string `json:"packageId,omitempty" tf:"package_id,omitempty"`
}

type ChannelObservation struct {

	// ID of the application this channel belongs to.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Arch. Cannot be changed once created.
	Arch *string `json:"arch,omitempty" tf:"arch,omitempty"`

	// Hex color code that informs the color of the channel in the UI.
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// Creation timestamp.
	CreatedTS *string `json:"createdTs,omitempty" tf:"created_ts,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the channel. Can be an existing one as long as the arch is different.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the package this channel provides.
	PackageID *string `json:"packageId,omitempty" tf:"package_id,omitempty"`
}

type ChannelParameters struct {

	// ID of the application this channel belongs to.
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Arch. Cannot be changed once created.
	// +kubebuilder:validation:Optional
	Arch *string `json:"arch,omitempty" tf:"arch,omitempty"`

	// Hex color code that informs the color of the channel in the UI.
	// +kubebuilder:validation:Optional
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// Name of the channel. Can be an existing one as long as the arch is different.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the package this channel provides.
	// +kubebuilder:validation:Optional
	PackageID *string `json:"packageId,omitempty" tf:"package_id,omitempty"`
}

// ChannelSpec defines the desired state of Channel
type ChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChannelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ChannelInitParameters `json:"initProvider,omitempty"`
}

// ChannelStatus defines the observed state of Channel.
type ChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Channel is the Schema for the Channels API. A release channel that provides a particular package version.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nebraska}
type Channel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.arch) || (has(self.initProvider) && has(self.initProvider.arch))",message="spec.forProvider.arch is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ChannelSpec   `json:"spec"`
	Status ChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelList contains a list of Channels
type ChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Channel `json:"items"`
}

// Repository type metadata.
var (
	Channel_Kind             = "Channel"
	Channel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Channel_Kind}.String()
	Channel_KindAPIVersion   = Channel_Kind + "." + CRDGroupVersion.String()
	Channel_GroupVersionKind = CRDGroupVersion.WithKind(Channel_Kind)
)

func init() {
	SchemeBuilder.Register(&Channel{}, &ChannelList{})
}
